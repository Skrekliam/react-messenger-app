{"version":3,"sources":["Connect.js","CreateChat.js","ActiveChats.js","database.js","useAuth.js","firebase.config.js","ChatWindow.js","useChats.js","App.js","reportWebVitals.js","index.js"],"names":["Connect","connect","useState","username","setUsername","type","placeholder","value","onChange","e","target","disabled","onClick","CreateChat","createChat","users","chatName","setChatName","recipient","setRecipient","map","user","ActiveChats","myActiveChats","setCurrentChat","chat","split","getFromDatabase","dbString","callback","Firebase","database","ref","on","snapshot","val","saveToDatabase","set","useAuth","userId","setUserId","setUsers","useEffect","getUsers","res","Object","keys","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ChatWindow","messages","sendMessage","currentChat","addUser","messageBody","setMessageBody","sortedMessages","sort","a","b","Date","created","valueOf","className","message","index","sender","body","useChats","setMyActiveChats","currentChatMessages","setCurrentChatMessages","values","fullChatName","messageId","uuidv4","toISOString","App","apps","length","app","initializeApp","style","color","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb4953f4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\n\r\n\r\nconst Connect = ({ connect }) => {\r\n    const [username, setUsername] = useState('');\r\n    return (\r\n        <div>\r\n            <input type='text' placeholder='Enter name' value={username} onChange={e => setUsername(e.target.value)} />\r\n            <button disabled={!username} onClick={() => connect(username)}>Connect</button>\r\n        </div >\r\n    )\r\n};\r\n\r\nexport default Connect;","import React, { useState } from 'react';\r\n\r\nconst CreateChat = ({createChat, users}) => {\r\n    const [chatName, setChatName] = useState('');     \r\n    const [recipient, setRecipient] = useState('');\r\n    \r\n    return (\r\n        <div>\r\n            <h3>Create chat</h3>\r\n            <p>Enter chat name, and choose recipient for your char</p>\r\n            <input placeholder='Chat name' value={chatName} onChange={e => setChatName(e.target.value)} />\r\n            <select onChange={e => setRecipient(e.target.value)} placeholder='select'>\r\n                {\r\n                    users.map(user => { \r\n                        return(\r\n                        <option key={user} value={user}>\r\n                            {user}\r\n                        </option>\r\n                    )\r\n                    })\r\n                    \r\n                }\r\n                \r\n\r\n            </select>\r\n\r\n\r\n            <p>Chat name: <b>{chatName}</b>, recipient <b>{recipient}</b></p>\r\n            <button onClick={() => createChat(recipient,chatName)} disabled={!recipient || !chatName}>Create chat</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateChat;","import React from 'react';\r\n\r\nconst ActiveChats = ({ myActiveChats, setCurrentChat}) => {\r\n    return (\r\n        <div>\r\n            {myActiveChats.map(chat => (\r\n                <div onClick={()=>setCurrentChat(chat)}>{chat.split('<id!45@')[0]}</div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActiveChats;","import Firebase from \"firebase\";\r\n\r\nexport const getFromDatabase = (dbString, callback) => {\r\n    const ref = Firebase.database().ref(dbString);\r\n    ref.on('value', snapshot => {\r\n        if (snapshot.val()) {\r\n            callback(snapshot.val());\r\n        }\r\n    });\r\n}\r\n\r\nexport const saveToDatabase = (dbString, val) => {\r\n    Firebase.database().ref(dbString).set(val);\r\n}","import {useState, useEffect}  from 'react'\r\nimport { saveToDatabase, getFromDatabase } from './database';\r\n\r\nconst useAuth = () => {\r\n    const [userId, setUserId] = useState(null);\r\n    const [users, setUsers] = useState(null);\r\n\r\n    useEffect(() =>{\r\n        getUsers();\r\n    }, []);\r\n\r\n    const connect = (username) => {\r\n        saveToDatabase(`/users/${username}`, true);\r\n        setUserId(username);\r\n    }\r\n\r\n    const getUsers = () => {\r\n        getFromDatabase('/users',res => {\r\n            setUsers(Object.keys(res))\r\n            \r\n        })\r\n    }\r\n    return [userId, users,connect];\r\n}\r\n\r\nexport default useAuth;","const firebaseConfig = {\r\n    apiKey: \"AIzaSyAxMYQywHkja7mjXDctTfok8VJo33wE7Wc\",\r\n    authDomain: \"messaging-ba2cd.firebaseapp.com\",\r\n    databaseURL: \"https://messaging-ba2cd-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"messaging-ba2cd\",\r\n    storageBucket: \"messaging-ba2cd.appspot.com\",\r\n    messagingSenderId: \"881813971262\",\r\n    appId: \"1:881813971262:web:14d2173b18a2ceb3fc0c6f\"\r\n  };\r\n  export default firebaseConfig;","import React, { useState } from 'react';\r\nconst ChatWindow = ({ messages = [], sendMessage, currentChat, userId, users, addUser }) => {\r\n    const [messageBody, setMessageBody] = useState('');\r\n\r\n    const sortedMessages = messages.sort((a, b) => new Date(a.created).valueOf() - new Date(b.created).valueOf());\r\n    return (\r\n        <div>\r\n            <div className='messages'>\r\n               {sortedMessages.map((message, index) => { return (\r\n                   <p className={userId === message.sender ? 'myMessage' : 'otherMessage' } \r\n                   key={index}>{message.sender}: {message.body}</p>\r\n               )})} \r\n            </div>\r\n            <div className='send-message'>\r\n               <textarea value={messageBody} onChange={e => setMessageBody(e.target.value)} className='text-entry' />\r\n               <button className='submit' onClick={() => {sendMessage(currentChat, messageBody); setMessageBody('') }}>Submit</button>\r\n               <select onChange={e => addUser(e.target.value,currentChat)} value='select'>\r\n                {\r\n                    users.map(user => { \r\n                        return(\r\n                        <option key={user} value={user}>\r\n                            {user}\r\n                        </option>\r\n                    )\r\n                    })\r\n                }   \r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatWindow;","import { useState, useEffect } from 'react'\r\nimport { saveToDatabase, getFromDatabase } from './database';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst useChats = (userId) => {\r\n    const [currentChat, setCurrentChat] = useState(null);\r\n    const [myActiveChats, setMyActiveChats] = useState([]);\r\n    const [currentChatMessages, setCurrentChatMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getFromDatabase(`/${userId}/chats`, res => {\r\n            setMyActiveChats(Object.keys(res));\r\n        });\r\n\r\n        getFromDatabase(`/chats/${currentChat}/messages`, res => {\r\n            setCurrentChatMessages(Object.values(res));\r\n        })\r\n    }, [currentChat, userId]);\r\n\r\n    const sendMessage = (chatName, body) => {\r\n        const messageId = uuidv4();\r\n        saveToDatabase(`/chats/${chatName}/messages/${messageId}`, {\r\n            body, sender: userId, created: new Date().toISOString(),\r\n        })\r\n    };\r\n    const createChat = (recipient, chatName) => {\r\n        const fullChatName = `${chatName}<id!45@${uuidv4()}`;\r\n        saveToDatabase(`/${recipient}/chats/${fullChatName}`, fullChatName);\r\n        saveToDatabase(`/${userId}/chats/${fullChatName}`, fullChatName);\r\n        saveToDatabase(`/chats/${fullChatName}/messages`, {});\r\n        setCurrentChat(fullChatName);\r\n    }\r\n    const addUser = (recipient, fullChatName) => {\r\n        saveToDatabase(`/${recipient}/chats/${fullChatName}`, fullChatName);\r\n    }\r\n\r\n\r\n    return {\r\n        addUser,\r\n        sendMessage,\r\n        createChat,\r\n        currentChat,\r\n        myActiveChats,\r\n        currentChatMessages,\r\n        setCurrentChat\r\n    };\r\n};\r\n\r\nexport default useChats;","import './App.css';\nimport Connect from './Connect.js'\nimport CreateChat from './CreateChat';\nimport ActiveChats from './ActiveChats';\nimport useAuth from './useAuth';\nimport Firebase from \"firebase\";\nimport firebaseConfig from './firebase.config.js'\nimport ChatWindow from './ChatWindow'\n\n\nimport useChats from './useChats';\n\nfunction App() {\n  if (!Firebase.apps.length) {\n    Firebase.initializeApp(firebaseConfig);\n  } else {\n    Firebase.app(); // if already initialized, use that one\n  }\n  const [userId, users, connect] = useAuth();\n  const {\n    myActiveChats,\n    setCurrentChat,\n    createChat,\n    sendMessage,\n    currentChat,\n    currentChatMessages,\n    addUser\n  } = useChats(userId);\n\n  return (\n    <>\n      {!userId ? <Connect connect={connect} /> : (\n        <>\n          <p style={{ color: 'green' }}>Connected as: {userId}</p>\n          <div className = 'ActiveChats'>\n          <ActiveChats\n            setCurrentChat={setCurrentChat}\n            myActiveChats={myActiveChats}\n          />\n          </div>\n          <div className = 'CreateChat'>\n          <CreateChat\n            createChat={createChat}\n            users={users.filter(user => user !== userId)}\n          />\n          </div>\n          <div className = 'CurrentChat'>\n          {\n            currentChat &&\n            <ChatWindow sendMessage={sendMessage}\n              currentChat={currentChat} \n              messages={currentChatMessages}\n              userId = { userId}\n              users={users.filter(user => user !== userId)}\n              addUser = { addUser }\n            />\n          }\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}